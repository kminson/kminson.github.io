---
title: "Monty Hall Simulation"
description: |
  An exploration of the probabilities within the Monty Hall problem through simulations
author: Minsong Kim
date: October 27, 2025
format: 
  html:
    code-fold: true
    code-summary: "Code"
---

```{r}
#| include: false
library(tidyverse)
library(ggplot2)
library(tictoc)
```

On this page, we will be exploring the Monty Hall problem through simulations. The Monty Hall problem is a probability problem that follows as such. Say you are on a game show, where you are given three doors to choose from. One door has a car, which represents winning the game, while the other two have goats, which represents failing the game. You select one door at random. Then, the host reveals one of the doors you didn't select, revealing a goat, and gives you the choice of either switching to the other door or staying with your initial choice. Should you choose to switch or not? The problem got its name from the TV show it was based off of, whose host's name was Monty Hall. This problem has a very interesting history, where a female mathematician, by the name of Marilyn Savant, gave an answer and posted it on a newspaper. What followed was thousands of messages and mail telling her she was wrong, many with PhD's, when she was in fact correct. Now lets see what the answer is!

First we begin by coding a function called monty_hall that represents the game once. The function has one input that determines if the player chooses to switch or not.

```{r}
#| message: false
monty_hall <- function(switch_choice) {
  doors <- letters[1:3] #A character vector of a, b, c to represent the three doors; a is the prize door
  first_choice <- sample(doors, 1) #Randomly choose our first door
  
  
  reveal <- if (first_choice == "a") { #Randomly reveal either b or c if a is selected
    sample(doors[doors != "a"], 1)
  } else if (first_choice == "b") { #Otherwise, reveal the unselected non-prize door
    "c"
  } else {
    "b"
  }
  
  doors <- doors[doors != reveal] #Reveal the selected door
  
  second_choice = if (switch_choice == 1) { 
    second_choice = sample(doors[doors != first_choice], 1) #If switch = 1, we switch to the other door
  } else {
    second_choice = first_choice #Otherwise, we stay with our first door
  }

  result = ifelse(second_choice == "a", #If our second choice is a, we win!
                         "Success!",
                         "Dud..."
                  )
  data.frame(second_choice, result) #Create a dataframe with a column showing final selected door and results
}
```

Then we map the function to a numeric vector that spans from 1 to 100,000, effectively running the function 100,000 times. This is our simulation.

```{r}
#| message: false
n <- 100000 #Set the simulation count to 100,000
switch_result <- 1:n |> #Use mapping to simulate the function n times with switching
  map(~ monty_hall(1)) |>
  list_rbind()

switch_summary <- switch_result |> #Condense the table of results to proportion of successes and failures
  group_by(result) |>
  summarise(number = n()) |>
  mutate(proportion = number / sum(number))

noswitch_result <- 1:n |> #Repeat for no switching
  map(~ monty_hall(0)) |>
  list_rbind()

noswitch_summary <- noswitch_result |>
  group_by(result) |>
  summarise(number2 = n()) |>
  mutate(proportion2 = number2 / sum(number2))
```

We'll take the results of this simulation and work it into a table for plotting, and finally create a visual with our results!

```{r}
#| message: false
full_summary <- full_join(switch_summary, noswitch_summary, by = "result") #Join the proportion results into one table

plot_data <- full_summary |> #Create a new table for easier plotting
  select(result, proportion, proportion2) |>
  pivot_longer(cols = starts_with("proportion"),
               names_to = "strategy",
               values_to = "proportion") |>
  mutate(strategy = if_else(strategy == "proportion", "Switch", "No Switch")) |>
  mutate(result = fct_relevel(result, c("Success!", "Dud..."))) |>
  mutate(strategy = fct_relevel(strategy, c("Switch", "No Switch")))

ggplot(plot_data, aes(x = result, y = proportion, fill = strategy)) + #Plot!
  geom_col(position = "dodge") +
  labs(
    title = "Monty Hall Simulation Results of 100,000 Runs",
    x = "Outcome",
    y = "Proportion of Wins",
    fill = "Strategy"
  ) +
  theme_minimal()
```

As you can see by the table, when the player chooses to switch, they have roughly 2/3rd odds to win, while only have 1/3rd odds to win if they choose not to switch. I was surprised because, even though I knew from previously reading about this problem that it was to the player's advantage to switch, I had a misunderstanding as to why that was. I believed that by revealing a losing door, the remaining unselected door had 1/2 odds of being the winning door since there were only two doors left, but the initial door only had 1/3rd odds of winning since it was selected while there was still 3 doors. However, the correct logic is that by switching, the unselected door gives the player 2/3rd odds of winning, as it effectively gives the player the "odds" of both the unrevealed unselected door and the revealed unselected door. When Savant wrote her response to all those letters telling her she was wrong, she used this analogy. \
"Suppose there are a million doors, and you pick door #1. Then, the host, who knows what's behind the door and will always avoid the one with a prize, opens them all except door #777,777. You'd switch to that door pretty fast, wouldn't you?"

I like this analogy a lot, because by scaling the problem to the extreme, Savant makes the solution a lot easier to grasp intuitively then it is with the problem's original setup. There's actually a whole Wikipedia page on this problem and all the research it spawned. The page has stuff like psychological tendacies why people intuitively grasp the wrong solution, how to mathematically prove the solution of the problem, different variants, etc. It's all very fascinating stuff.
